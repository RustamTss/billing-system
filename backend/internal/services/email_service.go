package services

import (
	"billing-system/config"
	"billing-system/internal/models"
	"context"
	"fmt"
	"strings"

	"gopkg.in/gomail.v2"
)

// emailService —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è EmailService
type emailService struct {
	config config.EmailConfig
}

// NewEmailService —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π EmailService
func NewEmailService(config config.EmailConfig) EmailService {
	return &emailService{
		config: config,
	}
}

// SendOverdueNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞—Ö
func (s *emailService) SendOverdueNotification(ctx context.Context, broker *models.Broker, invoices []*models.Invoice) error {
	if !s.isConfigured() {
		return nil // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –µ—Å–ª–∏ email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
	}

	subject := fmt.Sprintf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞—Ö - %s", broker.CompanyName)

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
	body := s.buildOverdueEmailBody(broker, invoices)

	return s.sendEmail(broker.Email, subject, body)
}

// SendInvoiceCreated –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞
func (s *emailService) SendInvoiceCreated(ctx context.Context, broker *models.Broker, invoice *models.Invoice) error {
	if !s.isConfigured() {
		return nil
	}

	subject := fmt.Sprintf("–ù–æ–≤—ã–π —Å—á–µ—Ç %s - %s", invoice.InvoiceNumber, broker.CompanyName)

	body := s.buildInvoiceCreatedEmailBody(broker, invoice)

	return s.sendEmail(broker.Email, subject, body)
}

// SendPaymentReceived –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
func (s *emailService) SendPaymentReceived(ctx context.Context, broker *models.Broker, payment *models.Payment, invoice *models.Invoice) error {
	if !s.isConfigured() {
		return nil
	}

	subject := fmt.Sprintf("–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω –¥–ª—è —Å—á–µ—Ç–∞ %s - %s", invoice.InvoiceNumber, broker.CompanyName)

	body := s.buildPaymentReceivedEmailBody(broker, payment, invoice)

	return s.sendEmail(broker.Email, subject, body)
}

// sendEmail –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email
func (s *emailService) sendEmail(to, subject, body string) error {
	m := gomail.NewMessage()
	m.SetHeader("From", fmt.Sprintf("%s <%s>", s.config.FromName, s.config.FromEmail))
	m.SetHeader("To", to)
	m.SetHeader("Subject", subject)
	m.SetBody("text/html", body)

	d := gomail.NewDialer(s.config.SMTPHost, s.config.SMTPPort, s.config.SMTPUsername, s.config.SMTPPassword)

	return d.DialAndSend(m)
}

// isConfigured –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ email
func (s *emailService) isConfigured() bool {
	return s.config.SMTPHost != "" &&
		s.config.SMTPUsername != "" &&
		s.config.SMTPPassword != ""
}

// buildOverdueEmailBody —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤
func (s *emailService) buildOverdueEmailBody(broker *models.Broker, invoices []*models.Invoice) string {
	var totalAmount float64
	var invoicesList strings.Builder

	for _, invoice := range invoices {
		totalAmount += invoice.RemainingAmount
		invoicesList.WriteString(fmt.Sprintf(`
			<tr>
				<td>%s</td>
				<td>%s %.2f</td>
				<td>%s</td>
			</tr>
		`, invoice.InvoiceNumber,
			getCurrencySymbol(invoice.Currency),
			invoice.RemainingAmount,
			invoice.DueDate.Format("02.01.2006")))
	}

	return fmt.Sprintf(`
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞</title>
</head>
<body style="font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5;">
	<div style="max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
		<h1 style="color: #ff4d4f; border-bottom: 2px solid #ff4d4f; padding-bottom: 10px;">
			‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–∞—Ö
		</h1>
		
		<p>–£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏ –∏–∑ <strong>%s</strong>!</p>
		
		<p>–û–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —á—Ç–æ —É –≤–∞—Å –∏–º–µ—é—Ç—Å—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É <strong style="color: #ff4d4f;">%.2f</strong>.</p>
		
		<h3>–î–µ—Ç–∞–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤:</h3>
		<table style="width: 100%%; border-collapse: collapse; margin: 20px 0;">
			<thead>
				<tr style="background-color: #f0f0f0;">
					<th style="border: 1px solid #ddd; padding: 12px; text-align: left;">–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞</th>
					<th style="border: 1px solid #ddd; padding: 12px; text-align: left;">–°—É–º–º–∞ –∫ –¥–æ–ø–ª–∞—Ç–µ</th>
					<th style="border: 1px solid #ddd; padding: 12px; text-align: left;">–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã</th>
				</tr>
			</thead>
			<tbody>
				%s
			</tbody>
		</table>
		
		<p style="color: #666;">–ü—Ä–æ—Å–∏–º –≤–∞—Å –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.</p>
		
		<div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #888; font-size: 12px;">
			<p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ –±–∏–ª–ª–∏–Ω–≥-—Å–∏—Å—Ç–µ–º—ã</p>
			<p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
		</div>
	</div>
</body>
</html>
	`, broker.CompanyName, totalAmount, invoicesList.String())
}

// buildInvoiceCreatedEmailBody —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞
func (s *emailService) buildInvoiceCreatedEmailBody(broker *models.Broker, invoice *models.Invoice) string {
	return fmt.Sprintf(`
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>–ù–æ–≤—ã–π —Å—á–µ—Ç</title>
</head>
<body style="font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5;">
	<div style="max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
		<h1 style="color: #1890ff; border-bottom: 2px solid #1890ff; padding-bottom: 10px;">
			üìÑ –ù–æ–≤—ã–π —Å—á–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω
		</h1>
		
		<p>–£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏ –∏–∑ <strong>%s</strong>!</p>
		
		<p>–î–ª—è –≤–∞—Å –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å—á–µ—Ç:</p>
		
		<div style="background-color: #f8f9fa; padding: 20px; border-radius: 4px; margin: 20px 0;">
			<table style="width: 100%%;">
				<tr>
					<td><strong>–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞:</strong></td>
					<td>%s</td>
				</tr>
				<tr>
					<td><strong>–°—É–º–º–∞:</strong></td>
					<td style="color: #1890ff; font-size: 18px; font-weight: bold;">%s %.2f</td>
				</tr>
				<tr>
					<td><strong>–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã:</strong></td>
					<td>%s</td>
				</tr>
				<tr>
					<td><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong></td>
					<td>%s</td>
				</tr>
			</table>
		</div>
		
		<p style="color: #666;">–ü—Ä–æ—Å–∏–º –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ä–æ–∫–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!</p>
		
		<div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #888; font-size: 12px;">
			<p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ –±–∏–ª–ª–∏–Ω–≥-—Å–∏—Å—Ç–µ–º—ã</p>
		</div>
	</div>
</body>
</html>
	`, broker.CompanyName,
		invoice.InvoiceNumber,
		getCurrencySymbol(invoice.Currency),
		invoice.Amount,
		invoice.DueDate.Format("02.01.2006"),
		invoice.Description)
}

// buildPaymentReceivedEmailBody —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–ª–æ –ø–∏—Å—å–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
func (s *emailService) buildPaymentReceivedEmailBody(broker *models.Broker, payment *models.Payment, invoice *models.Invoice) string {
	return fmt.Sprintf(`
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>–ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω</title>
</head>
<body style="font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5;">
	<div style="max-width: 600px; margin: 0 auto; background-color: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
		<h1 style="color: #52c41a; border-bottom: 2px solid #52c41a; padding-bottom: 10px;">
			‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–ª—É—á–µ–Ω
		</h1>
		
		<p>–£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏ –∏–∑ <strong>%s</strong>!</p>
		
		<p>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –ø–æ —Å—á–µ—Ç—É <strong>%s</strong>.</p>
		
		<div style="background-color: #f6ffed; padding: 20px; border-radius: 4px; margin: 20px 0; border-left: 4px solid #52c41a;">
			<table style="width: 100%%;">
				<tr>
					<td><strong>–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:</strong></td>
					<td style="color: #52c41a; font-size: 18px; font-weight: bold;">%s %.2f</td>
				</tr>
				<tr>
					<td><strong>–î–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞:</strong></td>
					<td>%s</td>
				</tr>
				<tr>
					<td><strong>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</strong></td>
					<td>%s</td>
				</tr>
				<tr>
					<td><strong>–ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</strong></td>
					<td>%s</td>
				</tr>
			</table>
		</div>
		
		<p style="color: #666;">–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—É—é –æ–ø–ª–∞—Ç—É! –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —É—á—Ç–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.</p>
		
		<div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #888; font-size: 12px;">
			<p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ –±–∏–ª–ª–∏–Ω–≥-—Å–∏—Å—Ç–µ–º—ã</p>
		</div>
	</div>
</body>
</html>
	`, broker.CompanyName,
		invoice.InvoiceNumber,
		getCurrencySymbol(payment.Currency),
		payment.Amount,
		payment.PaymentDate.Format("02.01.2006 15:04"),
		getPaymentMethodName(payment.PaymentMethod),
		payment.TransactionID)
}

// getCurrencySymbol –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã
func getCurrencySymbol(currency string) string {
	switch currency {
	case models.CurrencyUSD:
		return "$"
	case models.CurrencyEUR:
		return "‚Ç¨"
	case models.CurrencyRUB:
		return "‚ÇΩ"
	default:
		return currency
	}
}

// getPaymentMethodName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
func getPaymentMethodName(method string) string {
	switch method {
	case models.PaymentMethodWireTransfer:
		return "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥"
	case models.PaymentMethodCheck:
		return "–ß–µ–∫"
	case models.PaymentMethodCash:
		return "–ù–∞–ª–∏—á–Ω—ã–µ"
	case models.PaymentMethodCard:
		return "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞"
	case models.PaymentMethodCrypto:
		return "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"
	default:
		return method
	}
}
